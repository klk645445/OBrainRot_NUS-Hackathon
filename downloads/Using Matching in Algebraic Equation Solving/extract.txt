     Edinburgh Research Explorer                                      Using Matching in Algebraic Equation SolvingCitation for published version:Borning, A & Bundy, A 1981, 'Using Matching in Algebraic Equation Solving' Proceedings of IJCAI-7.Link:Link to publication record in Edinburgh Research ExplorerDocument Version:Author final version (often known as postprint)Published In:Proceedings of IJCAI-7General rightsCopyright for the publications made accessible via the Edinburgh Research Explorer is retained by the author(s)and / or other copyright owners and it is a condition of accessing these publications that users recognise andabide by the legal requirements associated with these rights.Take down policyThe University of Edinburgh has made every reasonable effort to ensure that Edinburgh Research Explorercontent complies with UK legislation. If you believe that the public display of this file breaches copyright pleasecontact openaccess@ed.ac.uk providing details, and we will remove access to the work immediately andinvestigate your claim.Download date: 20. Feb. 2015USING MATCHING IN ALGEBRAIC EQUATION SOLVING* Alan Borning and Alan Bundy Department o f A r t i f i c i a l I n t e l l i g e n c e Un ive rs i t y of Edinburgh Hope Park Square, Meadow Lane Edinburgh EH8 9NW Scotland ABSTRACT This paper describes the use of powerful a lgebra ic matching techniques f o r apply ing rewr i t e ru les In equat ion s o l v i n g . A matcher Is presented tha t knows about the commutat iv l ty and a s s o c i a t i v i t y o f a d d i t i o n and m u l t i p l i c a t i o n , w i l l provide de fau l t s f o r missing summands and f a c t o r s , and i f necessary w i l l solve a l g e b r a i c a l l y f o r the value o f pa t te rn v a r i a b l e s . able to der ive the so lu t ions to several of these hard problems. The PRESS so lu t ions c o n s t i t u t e a r a t i o n a l reconst ruc t ion of part of the h i s t o r y of a lgebra : we are not saying that t h i s is how these so lu t ions were f i r s t d iscovered, but that our program does show how they could have been discovered by a r a t i o n a l process of ana lys is of the problem, in terms o f the too l s ava i l ab le fo r i t s s o l u t i o n . 1 . I n t r o d u c t i o n This paper describes the use of powerful matching techniques in a lgebra ic equat ion s o l v i n g . This work bu i l ds on the PRESS algebra system, a computer program f o r so lv ing equations and I n e q u a l i t i e s and f o r s i m p l i f y i n g expressions [ 4 ] . A powerful matcher, upon which the present work is based, I s proposed i n [ 3 ] ; t h i s repor t a lso describes many of the ideas in PRESS. PRESS and the matcher extensions are w r i t t e n in PROLOG [ 7 ] . The goal of the resesrch described here is to t e s t the search con t ro l technique of meta- leve l inference and the powerful a lgebra ic manipulat ion methods of PRESS on some hard problems. We consider the problems of so lv ing the general quadrat ic and cubic equations and a general t r igonometr ic equat ion . The so lu t ions of these problems given in standard algebra textbooks a l l have a "magic" element. An expression is drawn out of a hat w i th a f l o u r i s h of "Consider the f o l l ow ing term • • • " • As a side e f f e c t of app ly ing the PRESS equation so lv ing methods, we show how the magic element can be understood. In f a c t , the program Is PRESS uses m u l t i p l e sets of rewr i te r u l e s , employing meta- leve l reasoning and descr ip t ions to guide that a p p l i c a t i o n and hence con t ro l search. Some of the Important rewr i te ru le sets a re : I s o l a t i o n PRESS t r i e s apply ing I s o l a t i o n ru les when there is a s ing le occurrence of the unknown in the equat ion. I s o l a t i o n ru les are appl ied to s t r i p away surrounding funct ions and operators from the unknown, f i n a l l y r e s u l t i n g in an equation w i t h the unknown on one side by i t s e l f , and some expression ( f r e e of the unknown) on the o the r . A t y p i c a l i s o l a t i o n ru le is a rcs in x - b -> x = s i n b. c o l l e c t i o n Co l l ec t i on ru les serve to reduce the number of occurrences of the unknown, so tha t i s o l a t i o n can be app l i ed . A t y p i c a l c o l l e c t i o n ru le i s uw + vw -> (u+v)w which c o l l e c t s r e l a t i v e to w. Computing resources f o r t h i s research were provided by Science Research Counci l grant number GR/A 37954. A. Borning was supported at the Un ive rs i t y of Edinburgh by a NATO Poatdoctoral Fel lowship from the Nat iona l Science Foundation. Current address: Computer Science Department, FR-35 Un ive rs i t y of Washington S e a t t l e , Washington 98195 USA a t t r a c t i o n A t t r a c t i o n ru les move occurrences of the unknown c loser together in the expression t r e e , so that perhaps a c o l l e c t i o n r u l e can be app l ied . A sample ru le is log bu + log b v -> log b uv , which a t t r a c t s u and v. To apply a rewr i t e ru le to an expression, PRESS uses a matcher tha t knows about the commutat iv l ty and a s s o c i a t i v i t y of a d d i t i o n and m u l t i p l i c a t i o n . For example, to apply the c o l l e c t i o n ru le uw + vw -> (u+v)w 466 to the expression xy + s(3x) in order to c o l l e c t the two occurrences of x, the PRESS matcher would subs t i t u te x f o r w, y f o r u, and 3s f o r v. The r esu l t of apply ing the ru le would be (y+3s)x. The matcher used the commutatlvl ty and a s s o c i a t i v i t y o f m u l t i p l i c a t i o n in accomplishing the match. An app l i ca t i on of c o l l e c t i o n is the c r u c i a l step in the so lu t i on of some equat ions. Ref lect ing t h i s , human mathematicians w i l l t r y qu i te hard to f i nd and apply a c o l l e c t i o n ru le to an expression. For example, the standard so lu t i on of the general quadrat ic equation ax2 + bx + c « 0 uses the c o l l e c t i o n ru le u2 + 2uv + v2 -> (u+v ) 2 . A l l the other steps of the so lu t i on are e i the r preparat ions fo r applying the r u l e , or subsequent i s o l a t i o n s teps. (However, a d i f f e r e n t terminology is usua l l y used — ra ther than t a l k i n g about rewr i te r u l e s , mathematicians t a l k about i d e n t i t i e s . A lso, the process of applying the above c o l l e c t i o n ru le is of ten presented in "compiled form*' as the operat ion of completing the square.) S i m i l a r l y , the standard so lu t ion of the t r igonomt r i c equat ion a s i n x 4- b cos x - c depends c r i t i c a l l y on the use of the ru le cos u s in v + s in u cos v -> s in (u+v) . (Descr ip t ions of the so lu t ions of these equations may be found in [ 9 ] . ) However, the app l i ca t i on of these ru les — matching the l e f t hand side of a ru le w i th an expression — cannot be accomplished by using simple pa t te rn matching and in format ion about a s s o c i a t i v i t y and commutat lv l ty. What add i t i ona l techniques are required? As part of an i nves t i ga t i on of t h i s quest ion, an experimental matcher has been embedded in PRESS that can, among other t h i ngs , solve both of the above equations from f i r s t p r i n c i p l e s . Otherwise, the matcher must t r y harder. The matcher has two ways of accomplishing a n o n - t r i v i a l match: by recurs ive ly matching corresponding par ts of the expression and the p a t t e r n , or by so lv ing a l geb ra i ca l l y f o r the value of a pa t te rn v a r i a b l e . 2 . 1 . Recursively Matching Parts of Expressions In genera l , to match two complex expressions, the matcher w i l l f i r s t check tha t the p r i n c i p a l operators or funct ions are the same, and w i l l then match the corresponding arguments. For example, consider matching the expression logea w i th the pat tern log v, where v is a pa t te rn v a r i a b l e . The matcher f i r s t checks that the funct ions log are the same, and then c a l l s I t s e l f recu rs i ve l y to match e w i th e, and a w i th v. The matcher knows about the commutat lvl ty and a s s o c i a t i v i t y of add i t i on and m u l t i p l i c a t i o n . When matching two sums or products, the matcher puts a l l the terms In each sum or product i n t o an unordered bag. It then has ava i lab le a range of a l t e r n a t i v e s in matching the two bags, among the more important be ing: - If both bag8 are empty, the match succeeds t r i v i a l l y . - The matcher can p ick a term from each bag and c a l l i t s e l f r ecu rs i ve l y to match the two terms. In using t h i s a l t e r n a t i v e , the matcher w i l l p ick the most complex term from one bag, using a simple complexity me t r i c . Then, i t w i l l p ick an appropr iate term from the other bag by performing a fussy match between the term from the f i r s t bag and candidate terms from the other bag. (See Section 3 f o r a desc r ip t i on of fussy matching.) - I f the term in e i t he r the expression or the pa t te rn is f ree of the unknown, the matcher can permit the match to succeed by adding or m u l t i p l y i n g each side of the ru le by a term, i f apply ing the operat ion w i l l not I nva l i da te prev ious ly matched parts of the expression and p a t t e r n . * If the pa t te rn contains a pa t te rn v a r i a b l e , the matcher can t r y to solve fo r I t s value a l g e b r a i c a l l y . (See Section 2 .2 . ) When matching a sum against any other expression ( i nc lud ing a p roduc t ) , the matcher w i l l convert the other expression i n t o a p lus bag w i t h j us t the one element. Matching a product against any other expression (except a sum) is handled analogously. 2. The Matching Algor i thm The matcher is ca l led w i t h descr ip t ions of the expression and pat tern to be matched. If the match is success fu l , a t ransform is re tu rned, cons is t ing of a ser ies of subs t i t u t i ons and ar i thmet ic operat ions, such that the resu l t of applying the transform to the pat tern would be a lgeb ra i ca l l y equal to the expression. When c a l l e d , the matcher f i r s t checks fo r simple cases. If the expression and pat tern are i d e n t i c a l , the match succeeds t r i v i a l l y , and the n u l l t ransform i s re turned. I f the pat tern consists so le l y of a pat tern v a r i a b l e , the match succeeds aga in , and a transform cons is t ing of the s ing le s u b s t i t u t i o n " va r i ab le -> expr" is re tu rned. 467 2 .2 . Solv ing A lgeb ra i ca l l y f o r the Value of a Pat tern Var iab le The other p r i n c i p a l technique f o r accomplishing a match la to solve a l g e b r a i c a l l y fo r the value of a pa t te rn v a r i a b l e . An equation is constructed whose two sides are the expression and pat tern to be matched, and presented to the main equation so lv ing r o u t i n e . Use of t h i s technique Increases the power of the matcher cons iderab ly , as i t puts the f u l l c a p a b i l i t i e s o f the equat ion so lver at the matcher 's d isposa l . In so lv ing equations of t h i s k i n d , a p a r t i c u l a r ra ther than a general so l u t i on is wanted. The equat ion so lver Is t o l d about t h i s by adding an appropr iate aaaer t lon to the data base, so that on ly a s ing le s o l u t i o n is re tu rned , w i t h a l te rna te so lu t ions being generated only i f the program backt racks. 3. Search Cont ro l The matcher has ava i l ab le a considerable range of s t ra teg ies f o r accomplishing a match; some of these s t r a t e g i e s , such as so lv ing a l g e b r a i c a l l y f o r the value of a pa t te rn v a r i a b l e , can be expensive to use. Therefore, I t is Important that the search Involved In accomplishing a match be t i g h t l y c o n t r o l l e d . The main technique f o r doing t h i s is the use of fuzzy matching as a p re l im ina ry check before the f u l l matcher is invoked. (Note that we are using the term "fuzzy** in a d i f f e r e n t sense than as in " fuzzy log ic**) • Fuzzy matching is used both f o r the i n i t i a l se lec t i on o f a c o l l e c t i o n r u l e , and fo r the se lec t i on of a pa i r of terms to match from two bags. Another technique fo r c o n t r o l l i n g search is the complexi ty h e u r i s t i c f o r decid ing which term in a bag to look at nex t . To check f o r a fuzzy match, the program computes the features terns of the expression and p a t t e r n , and then matches these using the normal PRESS matcher (which is comparat ively inexpensive) . The a lgor i thm f o r ex t r ac t i ng a features term gives spec ia l s ta tus to the unknown, r e f l e c t i n g the fac t that the matcher can o f ten deal w i t h miscellaneous expressions that are f ree of the unknown. - I f the expression is the unknown i t s e l f , then i t s features term is the unknown as w e l l . - I f the expression is f ree of the unknown, I t s features term is the expression "mumble". - To compute the features term of a sum, the features term of each term in the sum are found. A l l "mumbles" are d iscarded; the features term is then a sum cons is t i ng of the remaining features terms. Products are handled analogously. - In teger exponents of expressions not f ree of the unknown remain themselves. - The features term of any other complex expression is found by computing the featurea term of each argument, and re tu rn ing a new term w i t h each argument replaced by i t s corresponding features term. For example, suppose tha t x is the unknown. Then the features term of a cos y is "mumble", the features term of ax+b Is x, and the features term of a s in (x 2 )+cos (y 2 ) is s i n ( x 2 ) . These techniques have proven to be qu i te power fu l : most spurious matches are re jec ted dur ing fuzzy matching, and l i t t l e search is done using the f u l l matcher. To handle the search that does occur, the matcher uses the d e p t h - f i r s t search provided by the b u i l t - i n PROLOG backtracking mechanism, along w i th a memo procedure to save the resu l t s of matches in case they are needed aga in . The current search con t ro l methods are f o r the most part adequate fo r matches tha t are eventua l ly success fu l , and fo r matches that can ' t succeed (and are detected as such by the fuzzy matcher) . The matcher takes considerably longer on matches tha t pass the fuzzy matcher, but eventua l ly f a l l . For example, if one asks the system to f i n d the so lu t i on to the general cubic equat ion ax3 + bx2 + ex + d = 0, i t w i l l (reasonably enough) attempt to apply the c o l l e c t i o n ru le u3 + 3u2v +3uv2 + v3 -> ( u+v ) 3 . This match eventua l ly f a i l s , but only a f t e r considerable backt rack ing. 4. An Example — Der iv ing the So lu t ion f o r the General Quadratic Equation The operat ion of the matcher w i l l now be i l l u s t r a t e d by an example. Because of space l i m i t a t i o n s , a summary is presented here; a complete annotated trace of the matcher's operat ion on t h i s and other problems, as we l l as a f u l l e r desc r i p t i on of the program, may be found in [ 2 ] . To s t a r t th ings o f f , the user asks PRESS to solve the equation ax2 + bx + c ■ 0 fo r x. PRESS decides that I s o l a t i o n is not app l i cab le , since there are two occurrences of the unknown. I t there fore t r i e s to c o l l e c t these two occurrences. In searching f o r an app l icab le c o l l e c t i o n r u l e , the program f i r s t performs a fuzzy match between the expression and the pa t te rn part o f each p o t e n t i a l l y app l i cab le c o l l e c t i o n r u l e . The fuzzy matcher ex t rac ts a features term from the expression, and searches fo r a ru le w i th matching fea tu res . The features term of the l e f t hand side of the equat ion is x 2 + x , the c o e f f i c i e n t s and the constant term c having been regarded as r e l a t i v e l y unimportant . 468 One of the c o l l e c t i o n ru les known to PRESS is u2 + 2uv + v2 -> (u+v) 2 which c o l l e c t s r e l a t i v e to u. When the unknown x is subs t i tu ted f o r u, the features term of the ru le is also x 2 + x . The program therefore selects t h i s ru le and t r i e s to apply i t to the l e f t hand side of the equat ion. (This is in fac t the only c o l l e c t i o n ru le known to PRESS tha t w i l l pass the fuzzy match.) The f u l l matcher is now invoked to match the pat te rn part of the ru le w i th the quadrat ic expression. Since the p r i n c i p a l operator of both the expression and pat tern is + , the matcher converts to a bag representa t ion . As prev iously descr ibed, there are a number of ways in which two bags can be matched. The matcher t r i e s one of these methods: p ick ing a term from each bag and matching those two terms. It se lects the term ax2 from the expression (on the grounds that i t is the most complex), and then chooses a term w i th matching features from the r u l e , in t h i s case x • The matcher now c a l l s i t s e l f recurs ive ly on these two terms. Since the p r i n c i p a l operator of ax is t imes, the matcher again converts both terms 2 to a bag representa t ion . The x term from the pat tern is converted to a times bag w i th one 2 element. The matcher picks the nr terms from each bag, and matches them t r i v i a l l y . A f te r t h a t , however, it must match the expression bag, which s t i l l has the " a " l e f t in i t , w i th the now empty pa t te rn bag. The prev iously used st rategy of p ick ing a term from each product is no longer app l i cab le . Instead, the matcher decides that the "a " should be dea l t w i th by mu l t i p l y i ng both sides of the ru le by " a " . This resu l t is returned as a t ransform. The two remaining terms in the pat tern bag are m u l t i p l i e d by " a " , and the matcher is ca l led recurs ive ly on the remaining parts of the expression and r u l e , which are now bx + c and 2 2xva + v a. respec t i ve l y . Again convert ing to a bag representa t ion, the matcher recu rs i ve l y t r i e s to match the two terms conta in ing x, namely bx and 2xva. The two x ' s are matched t r i v i a l l y . The matcher then makes several unsuccessful attempts to match b wi th a term from the p a t t e r n . (The st ra tegy previously employed of m u l t i p l y i n g both sides of the ru le by some expression can no longer be used, since doing so would i nva l i da te the already establ ished match of 2 the x terms.) + c - b2/4a v -> b/2a The pat te rn w i l l match the expression i f the transform l i s t e d i s appl ied to i t ( m u l t i p l y each side of the ru le by a, then add c to each s i de , subtract b2 /4a from each s i de , and subs t i t u te b/2a for v ) . The ru le remains a v a l i d c o l l e c t i o n ru le a f t e r the transform has been appl ied to each side of i t . So the transform is appl ied to the replacement part of the r u l e , and the a l t e red c o l l e c t i o n ru le i s appl ied to the o r i g i n a l equat ion. The resu l t is (x+b/2a)2a + c - b2/4a - 0. Most of the work is now done. The new equation has a s ing le occurrence of x, and is eas i l y solved by I s o l a t i o n to y i e l d the two roots of the quadra t ic . The program's s o l u t i o n , w r i t t e n i n two-dimensional n o t a t i o n , i s : A f te r these f a i l u r e s , the matcher t r i e s the other p r i n c i p a l matching s t ra tegy , that of so lv ing a lgeb ra i ca l l y fo r the value of a pat tern v a r i a b l e . The equation so lv ing program is ca l led recurs ive ly If the f r ac t i ons are put over a common demonlnator, the answers s i m p l i f y to the usual expressions. (A package f o r performing t h i s sor t 46 9 of s i m p l i f i c a t i o n has been been incorporated i n t o PRESS, but a f t e r t h i s t race was taken.) 5. Other Problems Solved using the Matcher Another equat ion solved using the matcher is a s in x + b cos x • c* The features term of the l e f t hand side of the equat ion is s i n x + cos x* One of the t r igonometr ic c o l l e c t i o n ru les is cos u s i n v + s i n u cos v -> s l n (u+v ) , which c o l l e c t s r e l a t i v e to u. When x is subs t i t u ted fo r u , the features term of t h i s ru le is cos x + s i n x , which matches the features term of the l e f t hand side of the equat ion* (Note tha t the s i n v and cos v fac to rs are dropped, as they are f ree of the unknown.) The f i r s t term of the expression and the second term of the p a t t e r n , namely a s in x and s i n x cos v, are matched by m u l t i p l y i n g each side of the pa t te rn by a/cos v. The matcher next matches the remaining terms from the expression and p a t t e r n , which are now b cos x and (cos x s i n v)a/cos v respec t i ve ly * The two cos x f ac to rs are matched t r i v i a l l y * To complete the match, the matcher solves a l g e b r a i c a l l y f o r a value f o r the pa t te rn va r iab le v. In the process, the ( r ecu rs i ve l y invoked) equat ion so lver employs another c o l l e c t i o n step to c o l l e c t the two occurrences of v by using the ru le s i n w/cos w -> tan w* As an app l i ca t i on of the augmented PRESS program, a procedure was w r i t t e n tha t compiles spec ia l i sed methods f o r so lv ing c e r t a i n kinds of equations* The user gives the program the general form of an equat ion , such as the quadrat ic or the t r lgonomet lc equat ion* The program solves the equat ion using the powerful matcher, and then asser ts a new PROLOG procedure f o r so lv ing Instances of tha t equat ion* The matcher has a lso been used to solve equations using a change of unknown, such as the equation 52y . 5 y+ l + 6 . 0# Here, the equation is matched against an equation whose so lu t i on is known ( i n t h i s case the quadra t ic ) to generate the change of unknown 5V -> x . 6. Work In Progress A mi lestone in the h i s t o r y of algebra and equat ion so lv ing was the s o l u t i o n of the general cubic equat ion* We have recen t l y made progress toward g e t t i n g PRESS to solve t h i s equat ion* One so l u t i on we are working towards, described in [I], uses the c o l l e c t i o n r u l e cos3u - 3/4 cot u -> 1/4 cos(3u) . The program c u r r e n t l y w i l l solve the equation w i t h some he lp . PRESS reduces the general equat ion to 8s3 + hz + g - 0 using a l i nea r s u b s t i t u t i o n * However, at that point i t must be e x p l i c i t l y t o l d to t r y the "magic subs t i t u t i on ' 1 z - w cos u. We hope to extend PRESS so tha t i t w i l l be able to solve the cubic and quar t i c equations from f i r s t p r i n c i p l e s wi thout human i n t e r v e n t i o n , using both t h i s so lu t i on path and o the rs . 7. Related Work To the best of the authors ' knowledge, no other a lgebra ic matcher has been implemented that compares in power to the one described here, which bu i lds in the assoc ia t i ve , commutative, and d i s t r i b u t i v e laws, and has ava i lab le the f u l l power of the equation so lv ing system fo r so lv ing fo r a value fo r a pat tern v a r i a b l e . The PRESS program (wi thout the extensions described here) includes a matcher that knows about the commutet lv i ty and a s s o c i a t i v i t y of add i t i on and m u l t i p l i c a t i o n . The matcher in MACSYHA ( 5 ) , [6 ] knows about commutat lv i ty and a s s o c i a t i v i t y . It also provides de fau l t s fo r missing summands, f a c t o r s , and exponents, and w i l l d i s t r i b u t e products over sums to accomplish a match. There is considerable l i t e r a t u r e concerning pa t te rn matching in theorem proving — see [8 ] f o r a survey of the s ta te of the a r t . None of t h i s work is very re levant to the present research. Most of these a lgor i thms b u i l d in only a very few axioms, whereas the matcher described here bu i l ds in an i n d e f i n i t e number. On the other hand, these algor i thms are usua l ly f o r two-way matching and come w i t h a completeness p roo f , which we could not have. 470 REFERENCES [ 1 ] Ba rna rd and C h i l d . H i g h e r A l g e b r a . M a c M i l l a n , 1936. [ 2 ] B o r n l n g , A . , and Bundy, A . Us ing M a t c h i n g I n A l g e b r a i c E q u a t i o n S o l v i n g . Research Report 158, Dep t . o f A r t i f i c i a l I n t e l l i g e n c e , E d i n b u r g h , 1 9 8 1 . An expanded v e r s i o n o f t h i s I JCAI p a p e r . A l s o a v a i l a b l e a s T e c h n i c a l Report No. 8 1 * 0 5 - 0 1 , Computer Sc ience Depa r tmen t , U n i v e r s i t y o f W a s h i n g t o n . [ 3 ] Bundy, A . A n a l y s i n g M a t h e m a t i c a l P r o o f s ( o r r e a d i n g between t h e l i n e s ) . I n P r o c e e d i n g s o f t h e 4 t h I J C A I . G e o r g i a , 1975. A n expanded v e r s i o n i s a v a i l a b l e f rom E d i n b u r g h as DAI Research Repor t No. 2 . [A ] Bundy, A. and Welham, B. Us ing M e t a - l e v e l I n f e r e n c e f o r S e l e c t i v e A p p l i c a t i o n o f M u l t i p l e R e w r i t e Rules i n A l g e b r a i c M a n i p u l a t i o n . A r t i f i c i a l I n t e l l i g e n c e , 1 9 8 1 . I n p r e s s . A l s o a v a i l a b l e f rom E d i n b u r g h a s DAI Research Report No. 1 2 1 . [ 5 ] Fate man, R. J . Essays i n A l g e b r a i c S i m p l i f i c a t i o n . PhD t h e s i s , M I T , 1972. A l so a v a i l a b l e as MAC TR-95 . [ 6 ] M a t h l a b Group . MACSYMA Reference Manual M IT , 1977. [ 7 ] P e r e i r a , L . , P e r e i r a , F . , and W a r r e n , D . U s e r ' s Guide to DECsystem-10 PROLOG D e p t . o f A r t i f i c i a l I n t e l l i g e n c e , E d i n b u r g h , 1978. [ 8 ] R a u l e f s , P . , S iekmann, J , Szabo, P . , and U n v e r i c h t , E . A S h o r t Survey on the S t a t e o f t he A r t i n M a t c h i n g and U n i f i c a t i o n P rob lems . AISB Q u a r t e r l y ( 3 2 ) : 1 7 - 2 1 , December, 1978. [ 9 ] T r a n t e r , C . J . Advanced L e v e l Pure M a t h e m a t i c s . E n g l i s h U n i v e r s i t i e s P r e s s , 1970. 4 7 1 